name: Prod Automate Build-Push, Update-Task

on:
  workflow_dispatch:

env:
  BRAND_NAME: "TOUFIK"
  AWS_REGION: "ap-south-1"
  ECR_REGISTRY: "metabase"
  ECR_REPOSITORY: "metabase"
  ECS_SERVICE: "stage-metabase-service"
  ECS_CLUSTER: "demo"
  ECS_TASK_DEFINITION: "stage-metabase-task"
  CONTAINER_NAME: "metabase"
  ENVIRONMENT_VARIABLES: '[
      {"name": "MB_DB_HOST", "value": "${{ secrets.MB_DB_HOST }}"},
      {"name": "MB_DB_PORT", "value": "${{ secrets.MB_DB_PORT }}"},
      {"name": "MB_DB_DBNAME", "value": "${{ secrets.MB_DB_DBNAME }}"},
      {"name": "MB_DB_USER", "value": "${{ secrets.MB_DB_USER }}"},
      {"name": "MB_DB_PASS", "value": "${{ secrets.MB_DB_PASS }}"}
      ]'

permissions:
  contents: read

jobs:
  get-env-vars:
    name: Get Environment Vars
    runs-on: ubuntu-latest
    outputs:
      BRAND_NAME: ${{ steps.set-outputs.outputs.BRAND_NAME }}
      AWS_REGION: ${{ steps.set-outputs.outputs.AWS_REGION }}
      ECR_REGISTRY: ${{ steps.set-outputs.outputs.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ steps.set-outputs.outputs.ECR_REPOSITORY }}
      ECS_SERVICE: ${{ steps.set-outputs.outputs.ECS_SERVICE }}
      ECS_CLUSTER: ${{ steps.set-outputs.outputs.ECS_CLUSTER }}
      ECS_TASK_DEFINITION: ${{ steps.set-outputs.outputs.ECS_TASK_DEFINITION }}
      CONTAINER_NAME: ${{ steps.set-outputs.outputs.CONTAINER_NAME }}

    steps:
      - name: Set Outputs Using GITHUB_OUTPUT
        id: set-outputs
        run: |
          echo "BRAND_NAME=${{ env.BRAND_NAME }}" >> $GITHUB_OUTPUT
          echo "AWS_REGION=${{ env.AWS_REGION }}" >> $GITHUB_OUTPUT
          echo "ECR_REGISTRY=${{ env.ECR_REGISTRY }}" >> $GITHUB_OUTPUT
          echo "ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}" >> $GITHUB_OUTPUT
          echo "ECS_SERVICE=${{ env.ECS_SERVICE }}" >> $GITHUB_OUTPUT
          echo "ECS_CLUSTER=${{ env.ECS_CLUSTER }}" >> $GITHUB_OUTPUT
          echo "ECS_TASK_DEFINITION=${{ env.ECS_TASK_DEFINITION }}" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=${{ env.CONTAINER_NAME }}" >> $GITHUB_OUTPUT

      - name: store ENVIRONMENT_VARIABLES as an Environment Variab
        run: |
          echo "ENVIRONMENT_VARIABLES=${{ env.ENVIRONMENT_VARIABLES }}" >> $GITHUB_ENV
          
  # Trigger the build and push workflow
  # build-and-push-to-ecr:
  #   needs: get-env-vars
  #   uses: ./.github/workflows/build-and-push.yml@main
  #   with:
  #     ecr-registry: ${{ needs.get-env-vars.outputs.ECR_REGISTRY }}
  #     ecr-repository: ${{ needs.get-env-vars.outputs.ECR_REPOSITORY }}
  #     aws-region: ${{ needs.get-env-vars.outputs.AWS_REGION }}
  #     image-tag: "${{ github.run_number }}"
  #     dockerfile-path: "./"  # Specify the Dockerfile path
  #     brand_name: "${{ needs.get-env-vars.outputs.BRAND_NAME }}"
  #   secrets: inherit

  # Trigger the update ECS task and service workflow
  update-ecs-task-and-service:
    needs: get-env-vars
    uses: ./.github/workflows/update-task.yml
    with:
      brand_name: ${{ needs.get-env-vars.outputs.BRAND_NAME }}
      aws-region: ${{ needs.get-env-vars.outputs.AWS_REGION }}
      ECR_REGISTRY: ${{ needs.get-env-vars.outputs.ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ needs.get-env-vars.outputs.ECR_REPOSITORY }}
      ECS_CLUSTER_NAME: ${{ needs.get-env-vars.outputs.ECS_CLUSTER }}
      ECS_SERVICE_NAME: ${{ needs.get-env-vars.outputs.ECS_SERVICE }}
      ECS_TASK_DEFINITION: ${{ needs.get-env-vars.outputs.ECS_TASK_DEFINITION }}
      CONTAINER_NAME: ${{ needs.get-env-vars.outputs.CONTAINER_NAME }}
      ENVIRONMENT_VARIABLES: ${{ env.ENVIRONMENT_VARIABLES }}
    secrets: inherit
