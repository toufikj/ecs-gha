name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
    inputs:
      ecr-registry:
        description: 'The Amazon ECR registry URL'
        required: true
        type: string
        default: "783764579443.dkr.ecr.ap-south-1.amazonaws.com/demo"
      ecr-repository:
        description: 'The Amazon ECR repository name'
        required: true
        type: string
        default: demo
      aws-region:
        description: 'The AWS region'
        required: true
        type: string
        default: ap-south-1
      image-tag:
        description: 'The Docker image tag'
        required: false
        type: string
      dockerfile-path:
        description: 'The path to the Dockerfile'
        required: true
        type: string
        default: .
      brand_name:
        description: 'select the brand'
        required: true
        type: string
        default: TOUFIK

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', inputs.brand_name)] }}
            aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', inputs.brand_name)] }}
            aws-region: ap-south-1

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Latest Image Tag from ECR and Increment Version
        id: versioning
        run: |
          REPO_NAME="${{ inputs.ecr-repository }}"
          AWS_REGION="${{ inputs.aws-region }}"
          
          # Fetch the latest tags from ECR
          IMAGE_TAGS=$(aws ecr describe-images --repository-name $REPO_NAME --region $AWS_REGION \
            --query 'imageDetails[*].imageTags' --output json | jq -r '.[] | select(.!=null) | .[]' | sort -V)
          
          # Get the latest tag using semantic versioning
          LATEST_TAG=$(echo "$IMAGE_TAGS" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="1.0.0"  # If no valid semantic version exists, start with 1.0.0
          else
            MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1)
            MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
            PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
            PATCH=$((PATCH + 1))  # Increment patch version
            NEW_TAG="$MAJOR.$MINOR.$PATCH"
          fi
          
          echo "New Image Tag: $NEW_TAG"
          echo "IMAGE_TAG=$NEW_TAG" >> "$GITHUB_ENV"
          
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ${{ inputs.dockerfile-path }}
          file: ${{ inputs.dockerfile-path }}/Dockerfile
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr-repository }}:${{ env.IMAGE_TAG }}

      - name: Image digest
        run: echo ${{ steps.build-and-push.outputs.digest }}
