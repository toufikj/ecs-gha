name: Build and Push Docker Image to ECR

on:
  workflow_dispatch:
    inputs:
      ecr-registry:
        description: 'The Amazon ECR registry URL'
        required: true
        type: string
        default: "783764579443.dkr.ecr.ap-south-1.amazonaws.com/demo"
      ecr-repository:
        description: 'The Amazon ECR repository name'
        required: true
        type: string
        default: demo
      aws-region:
        description: 'The AWS region'
        required: true
        type: string
        default: ap-south-1
      dockerfile-path:
        description: 'The path to the Dockerfile'
        required: true
        type: string
        default: .
      brand_name:
        description: 'Select the brand'
        required: true
        type: string
        default: TOUFIK

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets[format('{0}_AWS_ACCESS_KEY_ID', inputs.brand_name)] }}
          aws-secret-access-key: ${{ secrets[format('{0}_AWS_SECRET_ACCESS_KEY', inputs.brand_name)] }}
          aws-region: ${{ inputs.aws-region }}

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Latest Image Tag from ECR and Increment Version
        id: versioning
        run: |
          REPO_NAME="${{ inputs.ecr-repository }}"
          AWS_REGION="${{ inputs.aws-region }}"
          
          # Fetch all image tags from ECR
          IMAGE_TAGS=$(aws ecr describe-images --repository-name $REPO_NAME --region $AWS_REGION \
            --query 'imageDetails[*].imageTags' --output json | jq -r '.[] | select(.!=null) | .[]' | sort -V)
          
          # Extract the latest semantic version (ignoring non-semantic versions)
          LATEST_TAG=$(echo "$IMAGE_TAGS" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v1.0.0"  # If no valid semantic version exists, start with v1.0.0
          else
            # Remove "v" prefix if it exists
            CLEAN_TAG=$(echo "$LATEST_TAG" | sed 's/^v//')
            MAJOR=$(echo "$CLEAN_TAG" | cut -d. -f1)
            MINOR=$(echo "$CLEAN_TAG" | cut -d. -f2)
            PATCH=$(echo "$CLEAN_TAG" | cut -d. -f3)
            
            if [[ "$PATCH" -lt 10 ]]; then
              PATCH=$((PATCH + 1))  # Increment patch version
            else
              PATCH=0  # Reset patch
              if [[ "$MINOR" -lt 10 ]]; then
                MINOR=$((MINOR + 1))  # Increment minor version
              else
                MINOR=0  # Reset minor
                MAJOR=$((MAJOR + 1))  # Increment major version
              fi
            fi
            
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"  # Add "v" prefix
          fi
          
          echo "Latest Tag: $LATEST_TAG"
          echo "New Image Tag: $NEW_TAG"
          echo "IMAGE_TAG=$NEW_TAG" >> "$GITHUB_ENV"

      - name: Build and push Docker image
        #${{ env.IMAGE_TAG }}
        id: build-and-push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ${{ inputs.dockerfile-path }}
          file: ${{ inputs.dockerfile-path }}/Dockerfile
          push: true
          tags: |
            ${{ steps.ecr-login.outputs.registry }}/${{ inputs.ecr-repository }}:v10.10.10  

